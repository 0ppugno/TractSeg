# Copyright 2017 Division of Medical Image Computing, German Cancer Research Center (DKFZ)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import math
from tractseg.libs import utils

#All FINAL  (for Training)
# (bad subjects removed: 994273, 937160, 885975, 788876, 713239)
# (no CA: 885975, 788876, 713239)
all_subjects_FINAL = ["992774", "991267", "987983", "984472", "983773", "979984", "978578", "965771", "965367", "959574",
                    "958976", "957974", "951457", "932554", "930449", "922854", "917255", "912447", "910241", "907656",
                    "904044", "901442", "901139", "901038", "899885", "898176", "896879", "896778", "894673", "889579",
                    "887373", "877269", "877168", "872764", "872158", "871964", "871762", "865363", "861456", "859671",
                    "857263", "856766", "849971", "845458", "837964", "837560", "833249", "833148", "826454", "826353",
                    "816653", "814649", "802844", "792766", "792564", "789373", "786569", "784565", "782561", "779370",
                    "771354", "770352", "765056", "761957", "759869", "756055", "753251", "751348", "749361", "748662",
                    "748258", "742549", "734045", "732243", "729557", "729254", "715647", "715041", "709551", "705341",
                    "704238", "702133", "695768", "690152", "687163", "685058", "683256", "680957", "679568", "677968",
                    "673455", "672756", "665254", "654754", "645551", "644044", "638049", "627549", "623844", "622236",
                    "620434", "613538", "601127", "599671", "599469"]   #105

#All With Outliers  (for Preprocessing)
all_subjects_RAW = ["994273", "992774", "991267", "987983", "984472", "983773", "979984", "978578", "965771", "965367", "959574", "958976",
                "957974", "951457", "937160", "932554", "930449", "922854", "917255", "912447", "910241", "907656", "904044", "901442",
                "901139", "901038", "899885", "898176", "896879", "896778", "894673", "889579", "887373", "885975", "877269", "877168",
                "872764", "872158", "871964", "871762", "865363", "861456", "859671", "857263", "856766", "849971", "845458", "837964",
                "837560", "833249", "833148", "826454", "826353", "816653", "814649", "802844", "792766", "792564", "789373", "788876",
                "786569", "784565", "782561", "779370", "771354", "770352", "765056", "761957", "759869", "756055", "753251", "751348",
                "749361", "748662", "748258", "742549", "734045", "732243", "729557", "729254", "715647", "715041", "713239", "709551",
                "705341", "704238", "702133", "695768", "690152", "687163", "685058", "683256", "680957", "679568", "677968", "673455",
                "672756", "665254", "654754", "645551", "644044", "638049", "627549", "623844", "622236", "620434", "613538", "601127",
                "599671", "599469"] #110

# 410 subjects - random order
all_subjects_Schizo = ['CH7912a', 'A00014804', 'A00020805', 'A00010684', 'CH8301a', 'A00014522', 'A00022915',
                       'A00001530', 'A00036451', 'A00022490', 'A00019803', 'A00020895', 'A00031788', 'A00023143',
                       'A00027787', 'A00015581', 'A00036256', 'A00019293', 'A00017294', 'CH7546a', 'A00013059',
                       'A00005037', 'A00021058', 'A00001181', 'A00009357', 'A00036403', 'A00012986', 'A00027434',
                       'CH8665b', 'A00018335', 'CH7131b', 'A00006931', 'A00017368', 'CH8853b', 'A00031429', 'A00037628',
                       'A00036330', 'A00036654', 'CH7684a', 'CH8914b', 'A00037871', 'A00021598', 'A00036405',
                       'A00019217', 'A00035915', 'CH7852a', 'A00027537', 'A00029045', 'A00003754', 'A00028189',
                       'A00024198', 'A00036238', 'CH7098a', 'A00036847', 'A00005153', 'A00012995', 'A00011655',
                       'CH1840', 'A00034092', 'CH8883a', 'A00023095', 'A00036232', 'A00037139', 'A00007745',
                       'A00030933', 'A00023243', 'A00036136', 'A00013816', 'A00035552', 'A00027978', 'CH8461a',
                       'A00024301', 'A00028404', 'A00024684', 'CH8335b', 'A00003684', 'A00025493', 'A00022592',
                       'A00014898', 'A00023800', 'A00024113', 'A00000909', 'A00019819', 'A00023246', 'A00024546',
                       'A00022509', 'A00037792', 'A00036133', 'A00016806', 'A00032885', 'A00006754', 'CH7259b',
                       'A00011115', 'A00020787', 'A00018235', 'A00017005', 'CH8701a', 'A00011415', 'A00023131',
                       'A00005936', 'A00017500', 'A00036248', 'A00036653', 'A00011739', 'A00001452', 'A00038770',
                       'A00002405', 'A00036429', 'A00003413', 'A00007401', 'A00036326', 'A00021081', 'A00022500',
                       'CH7316a', 'A00014120', 'A00036188', 'A00036657', 'CH3183', 'A00023366', 'CH8402b', 'CH5994',
                       'A00038122', 'A00018979', 'CH7668a', 'A00018145', 'A00024955', 'CH8698b', 'A00014225',
                       'A00036304', 'A00018150', 'A00000860', 'A00020630', 'A00026945', 'A00037200', 'A00019324',
                       'A00036107', 'A00015826', 'A00002198', 'A00003150', 'A00009949', 'A00018140', 'A00022729',
                       'CH7877a', 'A00015518', 'CH7496a', 'A00001243', 'A00024228', 'CH8413a', 'A00034378', 'A00028052',
                       'CH7718b', 'A00003158', 'CH7831a', 'CH8476a', 'CH7683a', 'A00022727', 'CH7193b', 'A00036458',
                       'A00037754', 'CH7781a', 'A00001271', 'CH8508a', 'A00014719', 'A00039430', 'CH7674b', 'A00018553',
                       'A00000368', 'A00035022', 'A00008015', 'A00036390', 'A00009948', 'A00016346', 'A00014887',
                       'A00023848', 'A00036366', 'A00000541', 'A00037847', 'A00019613', 'A00015272', 'A00023337',
                       'A00022837', 'CH7724b', 'A00019128', 'A00028139', 'CH8284b', 'CH8876b', 'A00024820', 'CH8926b',
                       'A00021676', 'A00021072', 'A00010443', 'CH7616b', 'A00024535', 'A00018872', 'A00028134',
                       'A00003880', 'A00019349', 'CH7317b', 'A00020883', 'A00019942', 'A00007343', 'A00027520',
                       'A00028507', 'A00027969', 'A00007946', 'A00019900', 'A00023750', 'A00036213', 'A00014636',
                       'A00037140', 'A00018370', 'A00036230', 'A00001251', 'A00020414', 'A00000865', 'CH7779b',
                       'A00028324', 'A00003162', 'A00036067', 'A00027755', 'A00036359', 'A00001048', 'A00038436',
                       'A00027616', 'A00017937', 'A00022773', 'CH7272b', 'A00018253', 'A00016646', 'CH8959a',
                       'A00013216', 'A00020984', 'A00018129', 'A00000838', 'CH8266b', 'A00036192', 'A00023120',
                       'CH8860b', 'CH8095a', 'A00015328', 'A00024663', 'A00017726', 'A00017691', 'A00039491',
                       'A00018434', 'A00022515', 'A00006942', 'A00036369', 'A00013446', 'A00004289', 'A00027839',
                       'A00036668', 'CH7562b', 'CH7814b', 'A00009160', 'A00012180', 'A00024568', 'CH7202b', 'A00028685',
                       'A00007470', 'CH8941a', 'A00010150', 'A00019612', 'A00018174', 'A00033766', 'A00036388',
                       'A00022835', 'A00036299', 'A00017147', 'A00036436', 'A00036216', 'A00009946', 'A00013663',
                       'A00009280', 'A00008203', 'A00019365', 'A00017896', 'A00017910', 'CH7353a', 'A00007409',
                       'A00018514', 'A00037145', 'A00036293', 'A00027498', 'CH7172a', 'A00025969', 'CH7510b',
                       'A00019941', 'CH8593b', 'A00034392', 'A00016723', 'A00005231', 'A00021145', 'A00036128',
                       'A00023132', 'A00036472', 'A00019139', 'A00036157', 'A00000984', 'A00000844', 'A00014590',
                       'CH8357', 'A00002480', 'A00020968', 'A00038585', 'CH7539a', 'CH7930a', 'CH8639a', 'A00015648',
                       'A00036652', 'A00036292', 'CH2917', 'CH8539b', 'A00008965', 'A00037141', 'A00014509',
                       'A00013140', 'A00008608', 'CH7059b', 'A00027827', 'CH7875b', 'A00000385', 'A00010600', 'CH7458a',
                       'CH8541b', 'A00022619', 'CH7614b', 'A00037177', 'A00022400', 'CH7264b', 'A00036247', 'A00037812',
                       'A00019343', 'A00034096', 'A00018851', 'A00021591', 'A00022687', 'CH8043b', 'A00036473',
                       'A00024953', 'A00036314', 'A00036351', 'A00026996', 'A00024372', 'A00031831', 'A00039384',
                       'A00018288', 'CH8937a', 'A00022810', 'A00037613', 'A00039190', 'A00037136', 'A00023158',
                       'CH7307a', 'A00023590', 'A00007883', 'A00036236', 'A00001853', 'A00031888', 'A00019750',
                       'A00036269', 'A00013363', 'A00024926', 'A00036276', 'CH7869b', 'A00020416', 'A00016197',
                       'A00036249', 'CH8930a', 'CH8577b', 'A00027838', 'CH8041b', 'A00021085', 'CH8559b', 'A00000828',
                       'CH8288a', 'CH8350b', 'A00028349', 'A00024959', 'A00018716', 'CH8001a', 'CH7567b', 'A00036358',
                       'A00009642', 'A00018317', 'A00018451', 'CH3098', 'A00019018', 'A00011725', 'CH8126b',
                       'A00019877', 'A00031279', 'A00026907', 'CH8033a', 'A00023330', 'A00002191', 'A00011265',
                       'A00028885', 'CH7957', 'A00018403', 'CH7944a', 'A00036455', 'A00031249', 'A00000159', 'CH7692a',
                       'A00000300', 'A00000456', 'A00014830', 'A00012767', 'A00014607']

def get_all_subjects(dataset="HCP"):
    '''
    This can be imported in other parts of project to get subjects
    '''
    if dataset.startswith("HCP"):
        return all_subjects_FINAL
    elif dataset.startswith("Schizo"):
        return all_subjects_Schizo
    else:
        raise ValueError("Invalid dataset name")

def get_all_subjects_RAW():
    return all_subjects_RAW

def get_subjects_chunk(nr_batches, batch_number):
    nr_batches = int(nr_batches)
    batch_number = int(batch_number)

    batch_size = int(math.ceil(len(all_subjects_RAW) / float(nr_batches)))
    res = list(utils.chunks(all_subjects_RAW, batch_size))
    final_subjects = res[batch_number]
    return final_subjects

def main():
    '''
    This can be used in Shell scripts to get subjects
    '''
    args = sys.argv[1:]
    nr_batches = int(args[0])  # Number of batches
    batch_number = int(args[1])  # Which batch do we want     (idx starts at 0)

    batch_size = int(math.ceil(len(all_subjects_RAW) / float(nr_batches)))
    res = list(utils.chunks(all_subjects_RAW, batch_size))

    #Note: can not print anyhting, because goes as parameter to script
    # print("Nr of Batches: {} (last batch might be smaller)".format(len(res)))
    # print("Nr of subjects in batch: {}".format(batch_size))
    final_subjects = res[batch_number]
    # print("Subjects: {}".format(final_subjects))

    #To String:
    str = ""
    for subject in final_subjects:
        str += subject + " "
    str = str[:-1]  #remove last space
    print(str)

if __name__ == "__main__":
    main()