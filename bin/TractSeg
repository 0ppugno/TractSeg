#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2017 Division of Medical Image Computing, German Cancer Research Center (DKFZ)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings
warnings.simplefilter("ignore", UserWarning)    #hide scipy warnings
warnings.simplefilter("ignore", FutureWarning)    #hide h5py warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed") #hide Cython benign warning
warnings.filterwarnings("ignore", message="numpy.ufunc size changed") #hide Cython benign warning

import argparse
import importlib
import os
import nibabel as nib
from os.path import join
import numpy as np

from tractseg.libs.Config import get_config_name
from tractseg.libs.ExpUtils import ExpUtils
from tractseg.libs.ImgUtils import ImgUtils
from tractseg.libs.Mrtrix import Mrtrix
from tractseg.libs.PlotUtils import PlotUtils
from tractseg.TractSeg import run_tractseg


'''
Usage:
TractSeg -i peaks.nii.gz --output_multiple_files --skip_peak_extraction
'''

parser = argparse.ArgumentParser(description="Segment white matter bundles in a Diffusion MRI image.",
                                    epilog="Written by Jakob Wasserthal. Please reference 'Wasserthal et al. " +
                                           "TractSeg - Fast and accurate white matter tract segmentation. https://doi.org/10.1016/j.neuroimage.2018.07.070'")
parser.add_argument("-i", metavar="filepath", dest="input", help="Diffusion Input image path (Nifti image)", required=True)
parser.add_argument("-o", metavar="directory", dest="output", help="Output directory")
parser.add_argument("--output_multiple_files", action="store_true", help="Create extra output file for each bundle", default=False)
parser.add_argument("--csd_type", metavar="csd|csd_msmt|csd_msmt_5tt", choices=["csd", "csd_msmt", "csd_msmt_5tt"],
                    help="Which MRtrix constrained spherical deconvolution (CSD) is used for peak generation.\n" +
                         "'csd' [DEFAULT]: Standard CSD. Very fast.\n" +
                         "'csd_msmt': Multi-shell multi-tissue CSD DHollander algorithm. Medium fast. Needs more than one b-value shell.\n" +
                         "'csd_msmt_5tt': Multi-shell multi-tissue CSD 5TT. Slow on large images. Needs more than one b-value shell." +
                         "Needs a T1 image (a file 'T1w_acpc_dc_restore_brain.nii.gz' must be in the input directory).", default="csd")
parser.add_argument("--output_type", metavar="tract_segmentation|endings_segmentation|TOM|dm_regression", choices=["tract_segmentation", "endings_segmentation", "TOM", "dm_regression"],
                    help="TractSeg can segment not only bundles, but also the end regions of bundles. Moreover it can create Tract Orientation Maps (TOM).\n" +
                         "'tract_segmentation' [DEFAULT]: Segmentation of bundles (72 bundles).\n" +
                         "'endings_segmentation': Segmentation of bundle end regions (72 bundles).\n" +
                         "'TOM': Tract Orientation Maps (20 bundles).",
                    default="tract_segmentation")
parser.add_argument("--bvals", metavar="filename", help="bvals file. Default is '<name_of_input_file>.bvals' in same directory as input")  #todo: change default
parser.add_argument("--bvecs", metavar="filename", help="bvecs file. Default is '<name_of_input_file>.bvecs' in same directory as input")
parser.add_argument("--brain_mask", metavar="filename", help="brain mask file. If not specified will automatically be generated with fsl bet")
parser.add_argument("--verbose", action="store_true", help="Show more intermediate output", default=False)
parser.add_argument("--skip_peak_extraction", action="store_true", help="Do not calculate input peaks. You have to provide them yourself as argument to -i", default=False)
parser.add_argument("--keep_intermediate_files", action="store_true", help="Do not remove intermediate files like CSD output and peaks", default=False)
parser.add_argument("--preview", action="store_true", help="Save preview of some tracts as png. Faster to view than nifti output image. Requires VTK.", default=False)
parser.add_argument("--flip", action="store_true", help="Flip output peaks of TOM along z axis to make compatible with MITK.", default=False)
parser.add_argument("--single_orientation", action="store_true", help="Do not run model 3x along x/y/z orientation with subsequent mean fusion.", default=False)
parser.add_argument("--bundle_specific_threshold", action="store_true", help="For converting probability maps to binary maps use lower threshold for difficult bundles like CA, FX and CST", default=False)
parser.add_argument("--get_probabilities", action="store_true", help="Output probability map instead of binary segmentation", default=False)
parser.add_argument("--track", action="store_true", help="Run tracking on TOM peaks", default=False)
parser.add_argument("--only_track", action="store_true", help="Run only tracking and nothing else", default=False)
parser.add_argument('--version', action='version', version='TractSeg 1.4')
args = parser.parse_args()

#Private parameters
input_type = "peaks"  # peaks / T1
dropout_sampling = False
threshold = 0.5         #specificity
filter_tracking_by_endpoints = False

config = get_config_name(input_type, args.output_type)
HP = getattr(importlib.import_module("tractseg.config.PretrainedModels." + config), "HP")()
HP.CSD_TYPE = args.csd_type
HP.KEEP_INTERMEDIATE_FILES = args.keep_intermediate_files
HP.VERBOSE = args.verbose
HP.OUTPUT_MULTIPLE_FILES = args.output_multiple_files
HP.FLIP_OUTPUT_PEAKS = args.flip
HP.PREDICT_IMG = args.input is not None
if args.output:
    HP.PREDICT_IMG_OUTPUT = join(args.output, HP.TRACTSEG_DIR)
elif HP.PREDICT_IMG:
    HP.PREDICT_IMG_OUTPUT = join(os.path.dirname(args.input), HP.TRACTSEG_DIR)

bvals, bvecs = ExpUtils.get_bvals_bvecs_path(args)
brain_mask = ExpUtils.get_brain_mask_path(HP, args)
ExpUtils.make_dir(HP.PREDICT_IMG_OUTPUT)

if not args.skip_peak_extraction:
    if args.brain_mask is None:
        brain_mask = Mrtrix.create_brain_mask(args.input, HP.PREDICT_IMG_OUTPUT)
    Mrtrix.create_fods(args.input, HP.PREDICT_IMG_OUTPUT, bvals, bvecs, brain_mask, HP.CSD_TYPE)

if args.skip_peak_extraction:
    data_img = nib.load(args.input)
else:
    data_img = nib.load(join(HP.PREDICT_IMG_OUTPUT, "peaks.nii.gz"))
data = data_img.get_data()

if not args.only_track:
    # # t1_data = nib.load("T1w_acpc_dc_restore_brain_DWIsize.nii.gz").get_data()[:,:,:,None]
    # t1_data = nib.load("T1w_acpc_dc_restore_brain.nii.gz").get_data()[:,:,:,None]
    # # t1_data = nib.load("T1w_acpc_dc_restore_brain.nii.gz").get_data()[1:,1:-1,1:,None]  #needed if upsampling of peaks resulted in one pixel less (sometimes)
    # data = np.concatenate((data, t1_data), axis=3)

    seg = run_tractseg(data, args.output_type, input_type=input_type,
                       single_orientation=args.single_orientation, verbose=args.verbose,
                       dropout_sampling=dropout_sampling, threshold=threshold,
                       bundle_specific_threshold=args.bundle_specific_threshold, get_probs=args.get_probabilities)

    if args.preview:
        print("Saving preview...")
        PlotUtils.plot_tracts(seg, HP.PREDICT_IMG_OUTPUT)

    if HP.OUTPUT_MULTIPLE_FILES:
        if HP.EXPERIMENT_TYPE == "tract_segmentation":
            ImgUtils.save_multilabel_img_as_multiple_files(HP, seg, data_img.get_affine(), HP.PREDICT_IMG_OUTPUT)
        elif HP.EXPERIMENT_TYPE == "endings_segmentation":
            ImgUtils.save_multilabel_img_as_multiple_files_endings(HP, seg, data_img.get_affine(), HP.PREDICT_IMG_OUTPUT)
        elif HP.EXPERIMENT_TYPE == "peak_regression":
            ImgUtils.save_multilabel_img_as_multiple_files_peaks(HP, seg, data_img.get_affine(), HP.PREDICT_IMG_OUTPUT)
        elif HP.EXPERIMENT_TYPE == "dm_regression":
            ImgUtils.save_multilabel_img_as_multiple_files(HP, seg, data_img.get_affine(), HP.PREDICT_IMG_OUTPUT, name="dm_regression")
    else:
        img = nib.Nifti1Image(seg, data_img.get_affine())
        if HP.EXPERIMENT_TYPE == "tract_segmentation":
            nib.save(img, join(HP.PREDICT_IMG_OUTPUT, "bundle_segmentations.nii.gz"))
        elif HP.EXPERIMENT_TYPE == "endings_segmentation":
            nib.save(img, join(HP.PREDICT_IMG_OUTPUT, "bundle_endings.nii.gz"))
        elif HP.EXPERIMENT_TYPE == "peak_regression":
            nib.save(img, join(HP.PREDICT_IMG_OUTPUT, "bundle_TOMs.nii.gz"))
        elif HP.EXPERIMENT_TYPE == "dm_regression":
            nib.save(img, join(HP.PREDICT_IMG_OUTPUT, "bundle_density_maps.nii.gz"))

if args.track or args.only_track:
    print("Tracking...")
    for bundle in ExpUtils.get_bundle_names(HP.CLASSES)[1:]:
        Mrtrix.track(bundle, args.input, HP.PREDICT_IMG_OUTPUT, brain_mask, filter_by_endpoints=filter_tracking_by_endpoints)

Mrtrix.clean_up(HP)

